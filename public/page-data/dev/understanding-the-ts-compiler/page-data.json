{"componentChunkName":"component---src-templates-blog-post-js","path":"/dev/understanding-the-ts-compiler/","result":{"data":{"site":{"siteMetadata":{"title":"Kylie is Online","author":"Kylie Stewart","siteUrl":"https://kyliestewart.tech/blog"}},"markdownRemark":{"id":"56d4d330-3ae2-51d7-a509-3302218e088d","excerpt":"I am trying to thoroughly test a library that has TypeScript support, but too many use cases to accurately track without contacting hundreds of thousands of consumers of said library to ensure we thoroughly understand it’s many, many use cases. The library consists of a single…","html":"<p>I am trying to thoroughly test a library that has TypeScript support, but too many use cases to accurately track without contacting hundreds of thousands of consumers of said library to ensure we thoroughly understand it’s many, many use cases.</p>\n<p>The library consists of a single function, and the types themselves are very simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> isEqual<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> isEqual <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> isEqual<span class=\"token punctuation\">;</span></code></pre></div>\n<p>As a single function that compares two elements and returns a boolean, you can imagine the use cases are fairly wide-ranging. Folks want to compare deeply-nested objects and get a proper result, and I can relate! This package is a fork of a package that does the same comparison, but this package adds handlers specific to React (and now Preact/compat!), allowing it to dive deeply into React components and pull out the correct value for comparison.</p>\n<h2 id=\"typescript-usage-testing-goal\" style=\"position:relative;\"><a href=\"#typescript-usage-testing-goal\" aria-label=\"typescript usage testing goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Usage Testing Goal</h2>\n<p>We want to target a specific directory to test our TypeScript in real-time, but without affecting the entire project ecosystem.</p>\n<p>We want this script to successfully run both locally and in CI, in 3 different Node environments.</p>\n<p>We want this test to identify any regressions introduced to the src or types themselves.</p>\n<h2 id=\"code-classlanguage-texttsccode\" style=\"position:relative;\"><a href=\"#code-classlanguage-texttsccode\" aria-label=\"code classlanguage texttsccode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">tsc</code></h2>\n<p>So, we have a set of tests living inside of a <code class=\"language-text\">test/typescript</code> dir. We are reaching these tests with a script that is run from the root’s <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// The script we are focused on testing right now</span>\n<span class=\"token string\">\"test-ts-usage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --jsx react --target ES6 --noImplicitAny --esModuleInterop typescript/index.tsx\"</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// This script existed before this test addition</span>\n<span class=\"token comment\">// It runs the existing index and makes sure there are no immediate errs</span>\n<span class=\"token string\">\"test-ts-defs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --target ES5 --noImplicitAny index.d.ts\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"what-is-it-doing-right-now\" style=\"position:relative;\"><a href=\"#what-is-it-doing-right-now\" aria-label=\"what is it doing right now permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is it doing right now?</h3>\n<p>Currently, when we run our <code class=\"language-text\">test-ts-usage</code> script, it is compiling <em>every</em> package we depend on, including testing libraries that aren’t being invoked by our test file itself. This is because of the compiler. I am suspicious that it’s viewing the project as a single entity, hence the all-encompassing compiling, so let’s dive into the compiler to see what options we’ll need to flag to get it to treat this single <code class=\"language-text\">tsx</code> file as an independently nested project.</p>\n<p>To see the test <code class=\"language-text\">tsx</code> file I am running this usage script against, check out this <a href=\"@TODO\">gist of typescript tests</a>.</p>\n<h3 id=\"how-can-we-fix-this\" style=\"position:relative;\"><a href=\"#how-can-we-fix-this\" aria-label=\"how can we fix this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How can we fix this?</h3>\n<p>We can use a combination of <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">compiler options</a> and a <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">project reference</a> to achieve our testing goal here.</p>\n<p>Using the project reference, we can direct <code class=\"language-text\">tsc</code> to view our mini suite as a project of its own, without installing peer dependencies from the root repository. But what is required to substantiate an entire project? How much boilerplate needs to be initialized?</p>\n<p>According to <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html#what-is-a-project-reference\">this blurb</a> in the docs defining a project reference, we only need to</p>\n<ol>\n<li>\n<p>Add a top-level key of <code class=\"language-text\">references</code> to our root <code class=\"language-text\">tsconfig.json</code>, a small array of objects of projects to refer to.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* react-fast-compare/tsconfig.json */</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"references\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test/typescript\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Add a <code class=\"language-text\">tsconfig,json</code> to the test directory we’ve pointed to as a separate project. All referenced projects need to have the <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html#composite\"><code class=\"language-text\">composite</code> flag</a> enabled “to ensure TypeScript can quickly determine where to find the outputs of the referenced project” (@TODO - annotation?). Now we can isolate our react-specific flags to the</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* react-fast-compare/test/typescript/tsconfig.json */</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"composite\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"more-about-code-classlanguage-texttsconfigcodes\" style=\"position:relative;\"><a href=\"#more-about-code-classlanguage-texttsconfigcodes\" aria-label=\"more about code classlanguage texttsconfigcodes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More about <code class=\"language-text\">tsconfig</code>s</h3>\n<p>Looking at <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">the docs</a>, we know that the presence of a <code class=\"language-text\">tsconfig.json</code> in a directory indicates that the directory is the <em>root</em> of a TypeScript project.</p>\n<p>The file is used to specify</p>\n<ul>\n<li>root files and their names</li>\n<li>\n<p>compiler options required to compile the project</p>\n<ul>\n<li><code class=\"language-text\">tsc</code> is invoked with no input files, the compiler looks for a <code class=\"language-text\">tsconfig</code></li>\n<li><code class=\"language-text\">tsx</code> is invoked with no input files but a <code class=\"language-text\">--project</code> is passed, specifying the path of a directory containing a tsconfig <em>or</em> valid json file with configurations (so it <strong>can</strong> be renamed in a sub-directory!)</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>When input files are specified on the command line, tsconfig.json files are ignored.</p>\n</blockquote>\n<p>So, this means, we can designate a project, point to a valid .json within that directory, and compile it independently. We now know we have the option to <em>extend</em> a root <code class=\"language-text\">tsconfig</code>, or override it completely. I think it’ll be more worthwhile to extend our existing config because the project is tiny enough that our source-of-truth approach should suffice; we don’t need a wide variety of <code class=\"language-text\">tsconfig</code>s to test against or anything.</p>","frontmatter":{"title":"Understanding the TypeScript Compiler","date":"May 19, 2020","thumbnail":null}}},"pageContext":{"slug":"/dev/understanding-the-ts-compiler/","previous":{"fields":{"slug":"/notion/using-formulas-to-calculate-weight/"},"frontmatter":{"title":"Using Formulas to Calculate Weight","category":"notion","draft":false}},"next":null}}}